// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonShop.BackEnd.DAL.Data;

#nullable disable

namespace MonShop.BackEnd.DAL.Migrations
{
    [DbContext(typeof(MonShopContext))]
    partial class MonShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8ebc1518-3138-4705-abc1-7226608c6ae6",
                            ConcurrencyStamp = "69eac579-dd3f-4427-99ed-c86b0455acd5",
                            Name = "ADMIN",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "2ed9ea2d-2360-46d9-a5e7-9c7078fcd0ab",
                            ConcurrencyStamp = "a6b2b2a4-f9f6-4b7d-b9ae-18ed1e7ff1a8",
                            Name = "STAFF",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = "e7313ad3-56c2-461f-9903-c630c46d3de1",
                            ConcurrencyStamp = "69652173-0c21-43f3-b208-fa68ece97ac7",
                            Name = "USER",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerifyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Pants",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Shirt",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Shoes",
                            IsDeleted = false
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Accessories",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.DeliveryAddress", b =>
                {
                    b.Property<string>("DeliveryAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryAddressId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("DeliveryAddresses");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomMemberChatId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("RoomMemberChatId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            OrderStatusId = 1,
                            Status = "Pending Pay"
                        },
                        new
                        {
                            OrderStatusId = 2,
                            Status = "Success Pay"
                        },
                        new
                        {
                            OrderStatusId = 3,
                            Status = "Failure Pay"
                        },
                        new
                        {
                            OrderStatusId = 4,
                            Status = "Shipped"
                        },
                        new
                        {
                            OrderStatusId = 5,
                            Status = "Delivered"
                        },
                        new
                        {
                            OrderStatusId = 6,
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.PaymentResponse", b =>
                {
                    b.Property<string>("PaymentResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("PaymentResponseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentResponse");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeId"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = 1,
                            Type = "Momo"
                        },
                        new
                        {
                            PaymentTypeId = 2,
                            Type = "VNPay"
                        },
                        new
                        {
                            PaymentTypeId = 3,
                            Type = "PayPal"
                        });
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("SizeId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "This is the description for Product 1.",
                            Discount = 5.0,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 19.989999999999998,
                            ProductName = "Product 1",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Description = "This is the description for Product 2.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 29.989999999999998,
                            ProductName = "Product 2",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = true,
                            Price = 9.9900000000000002,
                            ProductName = "Product 3",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "This is the description for Product 4.",
                            Discount = 2.5,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 24.989999999999998,
                            ProductName = "Product 4",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Description = "This is the description for Product 5.",
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 14.99,
                            ProductName = "Product 5",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Description = "This is the description for Product 6.",
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 17.989999999999998,
                            ProductName = "Product 6",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            Description = "This is the description for Product 7.",
                            Discount = 3.0,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 22.989999999999998,
                            ProductName = "Product 7",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            Description = "This is the description for Product 8.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 10.99,
                            ProductName = "Product 8",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Description = "This is the description for Product 9.",
                            Discount = 4.5,
                            ImageUrl = "https://aldo.com.sa/cdn/shop/collections/s22_q1_w_vday_accessories_cluster_4467-547936.jpg?v=1644355846",
                            IsDeleted = false,
                            Price = 27.989999999999998,
                            ProductName = "Product 9",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            Description = "This is the description for Product 10.",
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 14.99,
                            ProductName = "Product 10",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            Description = "This is the description for Product 11.",
                            Discount = 6.0,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 32.990000000000002,
                            ProductName = "Product 11",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1,
                            Description = "This is the description for Product 12.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 19.989999999999998,
                            ProductName = "Product 12",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            Description = "This is the description for Product 13.",
                            Discount = 2.0,
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 14.99,
                            ProductName = "Product 13",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            Description = "This is the description for Product 14.",
                            ImageUrl = "https://aldo.com.sa/cdn/shop/collections/s22_q1_w_vday_accessories_cluster_4467-547936.jpg?v=1644355846",
                            IsDeleted = false,
                            Price = 23.989999999999998,
                            ProductName = "Product 14",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2,
                            Description = "This is the description for Product 15.",
                            Discount = 1.5,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 11.99,
                            ProductName = "Product 15",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3,
                            Description = "This is the description for Product 16.",
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 29.989999999999998,
                            ProductName = "Product 16",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 1,
                            Description = "This is the description for Product 17.",
                            Discount = 3.0,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 18.989999999999998,
                            ProductName = "Product 17",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2,
                            Description = "This is the description for Product 18.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 13.99,
                            ProductName = "Product 18",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4,
                            Description = "This is the description for Product 19.",
                            Discount = 4.5,
                            ImageUrl = "https://aldo.com.sa/cdn/shop/collections/s22_q1_w_vday_accessories_cluster_4467-547936.jpg?v=1644355846",
                            IsDeleted = false,
                            Price = 26.989999999999998,
                            ProductName = "Product 19",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 3,
                            Description = "This is the description for Product 20.",
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 12.99,
                            ProductName = "Product 20",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 2,
                            Description = "This is the description for Product 21.",
                            Discount = 5.0,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 31.989999999999998,
                            ProductName = "Product 21",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 1,
                            Description = "This is the description for Product 22.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 16.989999999999998,
                            ProductName = "Product 22",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3,
                            Description = "This is the description for Product 23.",
                            Discount = 2.0,
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 15.99,
                            ProductName = "Product 23",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 4,
                            Description = "This is the description for Product 24.",
                            ImageUrl = "https://aldo.com.sa/cdn/shop/collections/s22_q1_w_vday_accessories_cluster_4467-547936.jpg?v=1644355846",
                            IsDeleted = false,
                            Price = 28.989999999999998,
                            ProductName = "Product 24",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 2,
                            Description = "This is the description for Product 25.",
                            Discount = 1.5,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 10.99,
                            ProductName = "Product 25",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 1,
                            Description = "This is the description for Product 26.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 19.989999999999998,
                            ProductName = "Product 26",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 3,
                            Description = "This is the description for Product 27.",
                            Discount = 2.0,
                            ImageUrl = "https://images.lululemon.com/is/image/lululemon/LW9EPYS_061712_1",
                            IsDeleted = false,
                            Price = 14.99,
                            ProductName = "Product 27",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 4,
                            Description = "This is the description for Product 28.",
                            ImageUrl = "https://aldo.com.sa/cdn/shop/collections/s22_q1_w_vday_accessories_cluster_4467-547936.jpg?v=1644355846",
                            IsDeleted = false,
                            Price = 23.989999999999998,
                            ProductName = "Product 28",
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 2,
                            Description = "This is the description for Product 29.",
                            Discount = 1.5,
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/quality=80,format=auto/uploads/April2023/somicfxam4.jpg",
                            IsDeleted = false,
                            Price = 11.99,
                            ProductName = "Product 29",
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 1,
                            Description = "This is the description for Product 30.",
                            ImageUrl = "https://media.coolmate.me/cdn-cgi/image/width=672,height=990,quality=85,format=auto/uploads/December2021/1-copy-2_99.jpg",
                            IsDeleted = false,
                            Price = 24.989999999999998,
                            ProductName = "Product 30",
                            ProductStatusId = 1
                        });
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SizeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductInventory");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductStatusId");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            ProductStatusId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            ProductStatusId = 2,
                            Status = "In Active"
                        });
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<string>("RoomImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.RoomMemberChat", b =>
                {
                    b.Property<int>("RoomMemberChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomMemberChatID"), 1L, 1);

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomMemberChatID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserId");

                    b.ToTable("RoomMemberChats");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"), 1L, 1);

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeName = "S"
                        },
                        new
                        {
                            SizeId = 2,
                            SizeName = "M"
                        },
                        new
                        {
                            SizeId = 3,
                            SizeName = "L"
                        },
                        new
                        {
                            SizeId = 4,
                            SizeName = "XL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Cart", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.CartItem", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("MonShop.BackEnd.DAL.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.DeliveryAddress", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Message", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.RoomMemberChat", "memberChat")
                        .WithMany()
                        .HasForeignKey("RoomMemberChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("memberChat");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Order", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MonShop.BackEnd.DAL.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("MonShop.BackEnd.DAL.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.OrderItem", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.PaymentResponse", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.Product", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("MonShop.BackEnd.DAL.Models.ProductStatus", "ProductStatus")
                        .WithMany()
                        .HasForeignKey("ProductStatusId");

                    b.HasOne("MonShop.BackEnd.DAL.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Category");

                    b.Navigation("ProductStatus");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.ProductInventory", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MonShop.BackEnd.DAL.Models.RoomMemberChat", b =>
                {
                    b.HasOne("MonShop.BackEnd.DAL.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonShop.BackEnd.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
